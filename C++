一、字符串
1、字符串与数值转换
int->string
示例：
int a = 5;
std::stringstream ssTemp;  
ssTemp<<a;  
std::string strDst=ssTemp.str(); 
OR:to_string();
string->int
int a = 0;
char *strData = "123";
stringstream stream(strData);  
stream>>a; 
2、删除string最后一个字符
str.substr(0,str.length() - 1);
str.erase(str.end() - 1);
str.pop_back();
二、多线程
1、thread初始化时使用类的成员函数：使用mem_fn
示例：
thread *t[4];
for(int i = 0;i < 4;i++){
    t[i] = new thread(mem_fn(&position::build_index),&p[i],final)；
    t[i].join();
}
2、C++11原子操作
C++11中引入了原子的概念，简而言之就是访问它时它自动加锁解锁，从而使软件开发更为简便
atomic_int val = { 0 };//这个类型也可以写作 atomic<int> 用于表示整型数据的原子
它实际上可以提供三种类型的操作：读、写、RMW（同时包括读写），通过三种类型的函数实现。
首先是读，比如 int i=val; 这样的代码，实际上是通过load函数实现。
int i = val.load (memory_order_seq_cst);
后面的参数代表内存顺序。这个的含义是顺序执行当前的原子操作。什么含义？含义就是，如果一个函数中对这个原子进行了多项操作，那么首先执行之前的原子操作，然后执行本条操作，最后执行之后的原子操作。说白了就是单线程的执行顺序。原子的操作过程并不是必须固定的，一个函数中如果有两条原子操作，那么首先执行后面操作，然后执行前面操作是完全可能的。这个在优化中经常会遇到。
然后是写操作，比如 val = i; 这样的操作
val.store (i, memory_order_seq_cst);
这儿也顺序执行
然后就是同时读写这样的操作了。 比如原子+=一个数之后同时可访问，通过compare_exchange这类函数实现。
然后，接下来说说内存访问模型了。一共有六种
（1）、memory_order_seq_cst    顺序执行，可用于读、写、RMW操作
（2）、memory_order_relaxed    乱序执行，可用于读、写、RMW操作
（3）、memory_order_acq_rel    首先执行之前的写操作，然后执行本条操作，然后执行之后的读操作，可用于RMW操作
（4）、memory_order_release    首先执行之前的写操作，然后执行本条操作，可用于写、RMW操作
（5）、memory_order_acquire    首先执行本条操作，然后执行后面的读操作，可用于读、RMW操作
（6）、memory_order_consume    首先执行本条操作，然后执行后面的读写操作，可用于读、RMW操作
